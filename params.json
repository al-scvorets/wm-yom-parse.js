{"name":"wm-yom-parse.js","tagline":"","body":"# Prehistory\r\n\r\n~~TL'DR This project emerged because of the stupid and lazy users~~  \r\nThe aim of the project was to organize some customers' data in simple and human-readable manner.  \r\nSource data may be saved/edited in this format, but for visualization and other processing they have to be converted into Javascript objects.  \r\nThe situation is very similar to when the data in CSV format may be stored/edited separately from their pattern in a spreadsheet or database.\r\n  \r\n\"And where does the ~~stupid and lazy~~ users?\"  \r\nThe fact that customers categorically refused to use XML (ah, it would be nice), and more over JSON (that would be perfect!)  \r\nSo I had to invent a new language for them: YOM.\r\n\r\n# YOM by Examples\r\n\r\nExample #1\r\n----------\r\n```\r\nanimals [cat, dog, elephant {big, gray}],\r\nplants [deciduous   [oak, maple, baobab],\r\n        other   [fir, cactus]\r\n]\r\n```\r\n\r\nExample #2\r\n----------\r\n```\r\nFile [\r\n    New, Open, Save,\r\n    Remove {disabled}\r\n    ],\r\nView [\r\n    Text [ANSI {default}, UTF-8],\r\n    Binary,\r\n    HTML\r\n    ],\r\nHelp [On-line, Forum, About]\r\n```\r\n\r\nExample #3\r\n----------\r\n```\r\nHeader {height:10} [\r\n    Welcome,\r\n    Controls [Help Button, Search Pane]\r\n    ],\r\nMain [\r\n    Teaser, News,\r\n    Articles [1, 2, ..., N]\r\n    ],\r\nFooter [Status Bar [Info1, Info2], Powered By, Copyright notice {color: gold}]\r\n```\r\n\r\nAnd Example #4\r\n----\r\n```\r\nPrehistory [\r\n    blah-blah-blah\r\n    ]\r\n\r\nYOM by Examples [\r\n    Example /#1 [blah-blah]\r\n    Example /#2 [blah-blah]\r\n    Example /#3 [blah]\r\n    ]\r\n```\r\n\r\nI hope everything is clear to the majority. For others:\r\n---\r\n\r\n# (Semi-)Formal Definition\r\n\r\n* Items (nodes) are delimited by ',' (comma) or \\n (line feed)\r\n* Node may have optional set of named attributes (in curly brackets)\r\n* Node may have optional set (array) of subnodes (in square brackets)\r\n\r\nThat's all!\r\n  \r\nAh, yeah...\r\n\r\n* '/' (slash) is used for escaping. So '/x' makes to treat 'x' literally (ex: '/,' --> ',' , '//' --> '/' etc.)    \r\nIt's to allow commas and brackets be in the text.\r\n* each attribute is a pair of 'name' and (optional) value. Name are delimited by ':' (colon) or '=' (equals sign). \r\nIf attribute has no an explicit value (ex. `{gray, big}`) then it is implicitly equal to *true*.  \r\nAttributes are delimited by ',' (comma)\r\n* Special symbol '#' (number sign | hash sign | octothorpe (!?)) is reserved for the future use (yes, we'll have comments! and not only...). It MUST be escaped ('/#') everywhere for now\r\n* One of the symbols '\\' | '+' | '-', or even all, will be used in the line end to make the line continuation.  \r\nAnd it will be in some nearest build.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}